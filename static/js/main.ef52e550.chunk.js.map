{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SHEET_ID","GoogleSpreadsheet","require","promisify","creds","row","a","alert","doc","useServiceAccountAuth","loadInfo","sheet","sheetsByIndex","console","log","title","loadCells","target","getCell","value","saveUpdatedCells","disagree","App","updateAgree","agree","parseInt","state","updateDisagree","data","handleChange","bind","handleSubmit","event","this","setState","preventDefault","type","onChange","name","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"q3FAGMA,EAAW,+CAETC,EAAsBC,EAAQ,KAA9BD,kBACAE,EAAcD,EAAQ,IAAtBC,UAEFC,EAAQF,EAAQ,K,4CAEtB,WAAqBG,GAArB,mBAAAC,EAAA,6DACEC,MAAM,gBADR,SAGIA,MAAM,gBACAC,EAAM,IAAIP,EAAkBD,GAClCO,MAAM,kBALV,SAMUJ,EAAUK,EAAIC,sBAAdN,CAAqCC,GAN/C,cAOIG,MAAM,kBAPV,UAQUC,EAAIE,WARd,eASIH,MAAM,kBACAI,EAAQH,EAAII,cAAc,GAEhCL,MAAM,gBAENM,QAAQC,IAAIH,EAAMI,OAdtB,UAgBUJ,EAAMK,YAhBhB,eAiBUC,EAASN,EAAMO,QAAQb,EAAK,GAClCQ,QAAQC,IAAIG,EAAOE,OAEnBF,EAAOE,MAAQ,QApBnB,UAqBUR,EAAMS,mBArBhB,0DAuBIP,QAAQC,IAAR,MACAP,MAAM,2DAxBV,2D,+BA4Bec,E,8EAAf,WAAwBhB,GAAxB,mBAAAC,EAAA,sEAEUE,EAAM,IAAIP,EAAkBD,GAFtC,SAGUG,EAAUK,EAAIC,sBAAdN,CAAqCC,GAH/C,uBAIUI,EAAIE,WAJd,cAKUC,EAAQH,EAAII,cAAc,GAEhCC,QAAQC,IAAIH,EAAMI,OAPtB,UASUJ,EAAMK,YAThB,eAUUC,EAASN,EAAMO,QAAQb,EAAK,GAClCQ,QAAQC,IAAIG,EAAOE,OAEnBF,EAAOE,MAAQ,WAbnB,UAcUR,EAAMS,mBAdhB,0DAgBIP,QAAQC,IAAR,MACAP,MAAM,2DAjBV,2D,0BAoEee,E,kDA9Cb,aAAe,IAAD,8BACZ,gBAsBFC,YAAc,Y,oCACZC,CAAMC,SAAS,EAAKC,MAAMP,MAAO,IAAM,IAxB3B,EA2BdQ,eA3Bc,sBA2BG,sBAAArB,EAAA,sEACTe,EAASI,SAAS,EAAKC,MAAMP,MAAO,IAAM,GADjC,2CAzBf,EAAKO,MAAQ,CACXE,KAAM,GACNT,MAAO,GAGT,EAAKU,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARR,E,yDAWDE,GACXC,KAAKC,SAAS,CAACf,MAAOa,EAAMf,OAAOE,U,mCAGxBa,GACXA,EAAMG,mB,4EAgBN,OACE,6BACE,8BACE,+BACE,2BAAOC,KAAK,SAASC,SAAUJ,KAAKJ,gBAEtC,2BAAOO,KAAK,SAASE,KAAK,cAAcnB,MAAM,QAAQoB,QAASN,KAAKV,cACpE,2BAAOa,KAAK,SAASE,KAAK,iBAAiBnB,MAAM,WAAWoB,QAASN,KAAKN,uB,GAxClEa,aC/CEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,a","file":"static/js/main.ef52e550.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n// import {GoogleSpreadsheet} from 'google-spreadsheet';\r\n\r\nconst SHEET_ID = '1CvuBgaAY0DtayM3yy9WAH5MU-dUwyTkx_iHN1ZDZP-8';\r\n\r\nconst { GoogleSpreadsheet } = require('google-spreadsheet');\r\nconst { promisify } = require('util');\r\n\r\nconst creds = require('./config/service_account_sheets_v2.json');\r\n\r\nasync function agree(row) {\r\n  alert(\"Checkpoint 1\");\r\n  try {\r\n    alert(\"Checkpoint 2\");\r\n    const doc = new GoogleSpreadsheet(SHEET_ID);\r\n    alert(\"Checkpoint 2.1\");\r\n    await promisify(doc.useServiceAccountAuth)(creds); // error is here\r\n    alert(\"Checkpoint 2.2\");\r\n    await doc.loadInfo();\r\n    alert(\"Checkpoint 2.3\");\r\n    const sheet = doc.sheetsByIndex[0];\r\n    \r\n    alert(\"Checkpoint 3\");\r\n  \r\n    console.log(sheet.title);\r\n    \r\n    await sheet.loadCells();\r\n    const target = sheet.getCell(row, 3);\r\n    console.log(target.value);\r\n\r\n    target.value = \"Agree\";\r\n    await sheet.saveUpdatedCells();\r\n  } catch (err) {\r\n    console.log(err);\r\n    alert(\"Failed to complete action, please contact maintainance.\");\r\n  }\r\n}\r\n\r\nasync function disagree(row) {\r\n  try {\r\n    const doc = new GoogleSpreadsheet(SHEET_ID);\r\n    await promisify(doc.useServiceAccountAuth)(creds); // error is here\r\n    await doc.loadInfo();\r\n    const sheet = doc.sheetsByIndex[0];\r\n  \r\n    console.log(sheet.title);\r\n    \r\n    await sheet.loadCells();\r\n    const target = sheet.getCell(row, 3);\r\n    console.log(target.value);\r\n\r\n    target.value = \"Disagree\";\r\n    await sheet.saveUpdatedCells();\r\n  } catch (err) {\r\n    console.log(err);\r\n    alert(\"Failed to complete action, please contact maintainance.\");\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      data: [],\r\n      value: 1,\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  updateAgree = () => {\r\n    agree(parseInt(this.state.value, 10) + 1);\r\n  }\r\n\r\n  updateDisagree = async () => {\r\n    await disagree(parseInt(this.state.value, 10) + 1);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>   \r\n        <form>\r\n          <label>\r\n            <input type=\"number\" onChange={this.handleChange} />\r\n          </label>\r\n          <input type=\"submit\" name=\"buttonAgree\" value=\"Agree\" onClick={this.updateAgree} />\r\n          <input type=\"submit\" name=\"buttonDisagree\" value=\"Disagree\" onClick={this.updateDisagree} />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}